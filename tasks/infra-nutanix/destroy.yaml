---
#===========================================================================
# Get the Infrastructure Provider for this host
#===========================================================================

- name: Get the infrastructure provider for this host
  ansible.builtin.include_tasks: "target_infra_credential.yaml"

#===========================================================================
# Destroy VM
#===========================================================================

- name: Check for this VM
  ansible.builtin.uri:
    url: "https://{{ provider.credentials.prism_endpoint }}:9440{{ nutanix_prism_api_v3_base }}/vms/list"
    return_content: yes
    method: POST
    status_code: 200
    body_format: json
    body: '{"kind":"vm", "filter": "vm_name=={{ cluster_name }}-{{ node_item.name }}"}'
    force_basic_auth: yes
    user: "{{ provider.credentials.prism_username }}"
    password: "{{ provider.credentials.prism_password }}"
    validate_certs: "{{provider.credentials.prism_verify_ssl }}"
  register: nutanix_vm_check

- name: Set VM UUID
  ansible.builtin.set_fact:
    nutanix_vm_uuid: "{{ vm.metadata.uuid }}"
  loop: "{{ nutanix_vm_check.json.entities }}"
  loop_control:
    loop_var: vm

- name: Delete VM
  when: nutanix_vm_uuid is defined
  ansible.builtin.uri:
    url: "https://{{ provider.credentials.prism_endpoint }}:9440{{ nutanix_prism_api_v3_base }}/vms/{{ nutanix_vm_uuid }}"
    return_content: yes
    method: DELETE
    status_code: 202
    body_format: json
    force_basic_auth: yes
    user: "{{ provider.credentials.prism_username }}"
    password: "{{ provider.credentials.prism_password }}"
    validate_certs: "{{provider.credentials.prism_verify_ssl }}"
